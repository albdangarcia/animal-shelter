generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL") // uses connection pooling
}

model Like {
  id    String @id @default(cuid())
  
  petId String @map(name: "pet_id")
  pet   Pet    @relation(fields: [petId], references: [id])

  userId String @map(name: "user_id")
  user   User   @relation(fields: [userId], references: [id])

  @@unique([userId, petId])
  @@map(name: "likes")
}

model Pet {
  id               String         @id @default(cuid())
  name             String
  age              Int
  gender           String
  speciesId        String
  species          Species        @relation(fields: [speciesId], references: [id])
  breed            String
  weight           Int
  height           Int
  city             String
  state            String
  description      String
  published        Boolean        @default(false)
  adoptionStatusId String         @map(name: "adoption_status_id")
  adoptionStatus   AdoptionStatus @relation(fields: [adoptionStatusId], references: [id])
  petImages        PetImage[]
  createdAt        DateTime       @default(now())
  likes            Like[]

  @@map(name: "pets")
}

model PetImage {
  id    String @id @default(cuid())
  url   String
  petId String @map(name: "pet_id")
  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)

  @@map(name: "pet_images")
}

model AdoptionStatus {
  id   String @id @default(cuid())
  name String
  Pet  Pet[]

  @@map("adoption_status")
}

model Species {
  id   String @id @default(cuid())
  name String
  Pet  Pet[]

  @@map(name: "species")
}

model Account {
  userId            String 
  type              String 
  provider          String 
  providerAccountId String 
  access_token      String?
  token_type        String?
  scope             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  password      String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  likes         Like[]
  role          String     @default("user")
  
  @@map(name: "users")
}